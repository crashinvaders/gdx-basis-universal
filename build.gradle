buildscript {
    repositories {
        google()
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "com.badlogicgames.gdx:gdx-jnigen-gradle:$jnigenVersion"
    }
}

allprojects {
    apply plugin: "idea"

    repositories {
        google()
        mavenLocal()
        mavenCentral()
        maven { url "https://repo1.maven.org/maven2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    ext {
        projectGroup = 'com.crashinvaders.basisu'
        versionName = '0.2.0'
        isSnapshot = false
        version = "$versionName${isSnapshot ? '-SNAPSHOT' : ''}"
    }
}

/** Checks if the property exists and if not tries to resolve it from the environment variable. */
void resolveProperty(String propertyName, String envVariableName) {
    if (!project.hasProperty(propertyName)) {
        project.ext.propertyName = System.getenv(envVariableName)
        if (!project.ext.propertyName) {
            println "$propertyName is not defined"
        } else {
            println "$propertyName has been set from an environment variable."
        }
    }
}
// Setup Nexus repo and GitHub package repo credentials.
// They usually defined in user global gradle.properties file
// or as environment variables (Travis-CI).
resolveProperty('ossrhUsername', 'OSSRH_USERNAME')
resolveProperty('ossrhPassword', 'OSSRH_PASSWORD')
resolveProperty('githubUsername', 'GITHUB_USERNAME')
resolveProperty('githubAccessToken', 'GITHUB_ACCESS_TOKEN')

def basisuLibProjects = [ project(':basisu-wrapper'), project(':basisu-gdx'), project(':basisu-gdx-gwt') ]

configure(basisuLibProjects) {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    compileJava.options.incremental = true

    version = ext.version
    group = ext.projectGroup

    jar {
        from project.sourceSets.main.output
        from(project.sourceSets.main.allSource) {
            include '**/*.xml'
        }
        archiveBaseName = project.name
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        repositories {
            maven {
                def urlRelease = '"https://oss.sonatype.org/service/local/staging/deploy/maven2/"'
                def urlSnapshot = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = isSnapshot ? urlSnapshot : urlRelease
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }

//              maven {
//                  name = "MavenLocalExplicit"
//                  url = "file://${System.properties['user.home']}/.m2/repository"
//              }

//              // Read about setting up a personal GitHub access token if you don't have one.
//              // https://docs.github.com/en/free-pro-team@latest/packages/learn-github-packages/about-github-packages#authenticating-to-github-packages
//              repository(url: "https://maven.pkg.github.com/crashinvaders/gdx-basis-universal") {
//                  authentication(userName: project.githubUsername, password: project.githubAccessToken)
//              }
        }

        publications {
            mavenJava(MavenPublication) {

                artifactId = project.name
                from components.java

                pom {
                    name = project.name
                    description = project.description
                    url = 'http://github.com/crashinvaders/gdx-basis-universal'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'metaphore'
                            name = 'Anton Chekulaev'
                            email = 'metaphore@crashinvaders.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git@github.com:crashinvaders/gdx-basis-universal.git'
                        developerConnection = 'scm:git:git@github.com:crashinvaders/gdx-basis-universal.git'
                        url = 'http://github.com/crashinvaders/gdx-basis-universal'
                    }
                }
            }
        }
    }

    signing {
//      required { !isSnapshot && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }

    // Simply using "required" in signing block doesn't work because taskGraph isn't ready yet.
    gradle.taskGraph.whenReady {
        tasks.withType(Sign) {
            onlyIf { !isSnapshot }
//          onlyIf { !isSnapshot && gradle.taskGraph.hasTask("publish") }
        }
    }

    // Invokes publish task if the version is a snapshot.
    task publishSnapshot() {
        if (!isSnapshot) {
            return
        }
        dependsOn project.assemble
        dependsOn project.publish
    }
}

task publishAll {
    group 'GDX Basis Universal'
    description 'Publish all the Maven artifacts to the public repos.'

    basisuLibProjects.forEach {project ->
        dependsOn project.build
        dependsOn project.publish
    }
}

task publishAllSnapshots {
    group 'GDX Basis Universal'
    description 'Publish all the Maven artifacts to the public repos.' +
            'This task will only be execute if the current version is a snapshot.'

    basisuLibProjects.forEach {project ->
        dependsOn project.build
        dependsOn project.publishSnapshot
    }
}

task installAll {
    group 'GDX Basis Universal'
    description 'Installes all the Maven artifacts to the local Maven repo.'

    basisuLibProjects.forEach {project ->
        dependsOn project.build
        dependsOn project.publishToMavenLocal
    }
}