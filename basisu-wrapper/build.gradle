compileJava.options.headerOutputDirectory.set(file('jni'))

sourceSets.main.java.srcDirs += ['src']
sourceSets.test.java.srcDirs += ['test/src']
sourceSets.test.resources.srcDirs += ['test/resources']

dependencies {
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.badlogicgames.gdx:gdx-jnigen-loader:$jnigenVersion"
    testRuntimeOnly files("${project.layout.buildDirectory.get()}/libs/basisu-wrapper-${version}-natives-desktop.jar")
}

test {
    useJUnit()
    maxHeapSize = '1G'
    workingDir = 'test'
}

//region jnigen configuration
apply plugin: 'com.badlogicgames.gdx.gdx-jnigen'

// The set of supported native GPU texture formats varies based on the platform.
// "-DBASISD_SUPPORT_*" flag params disable specific transcoder texture tables to save up space.
// Unity Engine docs have a nice reference page - https://docs.unity3d.com/Manual/class-TextureImporterOverride.html
//
// Desktop
// Essentially supports everything (or it's more accurate to say ANYTHING), so we need them all.
// Except for a few mobile-first GPU specific formats.
def desktopUnsupportedFormats = ' -DBASISD_SUPPORT_PVRTC1=0 '

// Web (WebGL) - all the disabled texture types hardcoded in the jni/build-web.xml Ant script file.
// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Compressed_texture_formats
// SUPPORTED TEXTURES: [ASTC, ETC1, ETC2, PVRTC1, DXT]

jnigen {
    sharedLibName = 'gdx-basis-universal'

    nativeCodeGenerator {
        sourceDir = '/src'
    }

    all {
        headerDirs = [
                'include',
                'basis-universal/transcoder',
                'basis-universal/zstd',
        ]
        cIncludes = [
                // Basis Universal files.
                'basis-universal/zstd/zstddeclib.c',
        ]
        cppIncludes = [
                // Basis Universal files.
                'basis-universal/transcoder/basisu_transcoder.cpp',

                // Local JNI files.
                'basisu_wrapper.cpp',
                'basisu_native_utils.cpp',

                // Auto generated JNI classes.
                'com_crashinvaders_basisu_wrapper_BasisuWrapper.cpp',
                'com_crashinvaders_basisu_wrapper_BasisuFileInfo.cpp',
                'com_crashinvaders_basisu_wrapper_BasisuImageInfo.cpp',
        ]
        cExcludes = cppExcludes = [
                'build/**',
        ]

        def commonFlags = '-fvisibility=hidden -Wall -O2 -g0 -fno-exceptions'

        cFlags += " -std=c11 $commonFlags "
        cppFlags += " -std=c++11 $commonFlags "
        linkerFlags += " $commonFlags "

        // Disable texture formats we don't support at all.
        // Macros reference - https://github.com/BinomialLLC/basis_universal/wiki/Transcoder-details-and-shrinking-the-compiled-size-of-the-transcoder#shrinking-the-transcoders-compiled-size
        cppFlags += ' -DBASISD_SUPPORT_FXT1=0 '

        // Basis Universal general switches.
        cppFlags += ' -DBASISU_SUPPORT_ENCODING=-0 '
        cppFlags += ' -DBASISD_SUPPORT_KTX2=0 '
        cppFlags += ' -DBASISD_SUPPORT_KTX2_ZSTD=0 '

        // Enable for Basis Universal debug messages.
        // cppFlags += ' -DBASISU_FORCE_DEVEL_MESSAGES=1 '
    }
    add(Windows, x64) {
        def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
        if (os.isWindows()) {
            compilerSuffix = '.exe'
        }

        linkerFlags += ' -s '   // Strip debug symbols.
        cppFlags += desktopUnsupportedFormats
    }
    add(Linux, x64) {
        cppFlags += desktopUnsupportedFormats
    }
    add(Linux, x32, ARM) {
        cppFlags += desktopUnsupportedFormats
    }
    add(Linux, x64, ARM) {
        cppFlags += desktopUnsupportedFormats
    }
    add(MacOsX, x64) {
        cppFlags += desktopUnsupportedFormats
    }
    add(MacOsX, x64, ARM) {
        cppFlags += desktopUnsupportedFormats
    }
    add(Android) {
        linkerFlags += ' -llog '  // We use "log.h" lib and should explicitly declare it.

        // NDK doesn't include a standard lib, we should explicitly ask for it.
        androidApplicationMk += 'APP_STL := c++_static'
        // This min SDK comes from the NDK 26 itself.
        androidApplicationMk += 'APP_PLATFORM := android-26'

//        cppFlags += ' -fexceptions '
//        cppFlags += ' -frtti '

        // Android
        // SUPPORTED TEXTURES: [ASTC, ETC1, ETC2, DXT, ATC, PVRTC1 and PVRTC2]
        cppFlags += ' -DBASISD_SUPPORT_BC7=0 '
        cppFlags += ' -DBASISD_SUPPORT_BC7_MODE5=0 '

        // Should be in sync with the official supported ABI list.
        // https://developer.android.com/ndk/guides/abis#sa
        androidABIs = ['armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64']
    }
    add(IOS) {
        cppFlags += ' -stdlib=libc++ '  // iOS compiler toolchain is pretty whiny about this...

        // iOS
        // SUPPORTED TEXTURES: [ASTC, ETC1, ETC2, PVRTC1]
        cppFlags += ' -DBASISD_SUPPORT_DXT1=0 '
        cppFlags += ' -DBASISD_SUPPORT_DXT5A=0 '
        cppFlags += ' -DBASISD_SUPPORT_BC7=0 '
        cppFlags += ' -DBASISD_SUPPORT_BC7_MODE5=0 '
        cppFlags += ' -DBASISD_SUPPORT_ATC=0 '
        cppFlags += ' -DBASISD_SUPPORT_PVRTC2=0 '
    }
}

getTasksByName('jnigen', false).first().doLast {
    //FIXME Remove this once "jnigen" task creates "libs" under the respected module (currently it writes to the root project dir).
    if (file("${rootDir}/libs").exists()) {
        println "Applying libs dir fix..."
        ant.move file: "${rootDir}/libs",
                todir: "${projectDir}"
    }

    // Update "ndkSuffix" Android build property with platform specific file suffix.
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        ant.replaceregexp(
                match: '<property name="ndkSuffix" value="" />',
                replace: '<property name="ndkSuffix" value=".cmd" />',
                flags: 'g',
                byline: true) {
            fileset(dir: 'jni', includes: 'build-android32.xml')
        }
    }
}

task jnigenBuildWeb() {
    group 'jnigen'
    description 'Executes jnigen build script for build target web (JS + WASM).'

    // This is pretty much the direct copy of JnigenBuildTargetTask#run() code.
    doFirst {
        if (!com.badlogic.gdx.jnigen.BuildExecutor.executeAnt(
                "${projectDir}/jni/build-web.xml",
                "-Drelease=" + jnigen.release, "clean", "postcompile", "-v")) {
            throw new RuntimeException("Ant execution for web failed.");
        }
    }
}

task jnigenJarNativesWeb(type: Jar) {
    group 'jnigen'
    description 'Assembles a jar archive containing the web native libraries.'

    archiveBaseName = project.name
    archiveVersion = project.version
    archiveClassifier = 'natives-web'

    from "${projectDir}/${jnigen.libsDir}/web"
    from "${projectDir}/${jnigen.jniDir}/BasisuWrapperNatives.gwt.xml"

    mustRunAfter compileJava
}

task jnigenJarNativesAll {
    group 'jnigen'
    description 'Assembles jar archives native libraries for all the supported platforms.'

    dependsOn jnigenJarNativesDesktop
    dependsOn jnigenJarNativesIOS
    dependsOn jnigenJarNativesWeb
    // Include all the Android ABI jars.
    jnigenJarNativesAndroid.dependsOn.forEach { androidAbiJarNativesTask ->
        dependsOn androidAbiJarNativesTask
    }
}

//// Import native build Ant tasks.
//if (file('jni/build.xml').exists()) {
//    println 'Importing ANT tasks from \"jni/build.xml\"'
//    ant.importBuild('jni/build.xml') { antTargetName ->
//        def taskName = 'jnigenAntBuild-' + antTargetName
//        println "\"$taskName\" ANT task has been imported."
//        taskName
//    }
//}

test.dependsOn jnigenJarNativesDesktop

//endregion