apply plugin: 'java-library'

group 'com.crashinvaders.gdx-basis-universal'
version '0.1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava.options.incremental = true
compileJava.options.headerOutputDirectory.set(file('jni'))

sourceSets.main.java.srcDirs += ['src']
sourceSets.test.java.srcDirs += ['test']
sourceSets.test.resources.srcDirs += ['test-resources']

dependencies {
    testRuntimeOnly files('libs/gdx-basis-universal-natives.jar')
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.badlogicgames.gdx:gdx-jnigen-loader:$jnigenVersion"
}

test {
    useJUnit()
    maxHeapSize = '1G'
}

//region jnigen configuration
apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

jnigen {
    sharedLibName = 'gdx-basis-universal'

    nativeCodeGenerator {
        sourceDir = '/src'
//        includes = ['**/com/crashinvaders/basisu/wrapper/*.java']
    }

    all {
        headerDirs = ['src']
        cExcludes = cppExcludes = ['test/**', '.vscode/**', 'build/**',]

        cFlags += ' -fvisibility=hidden '
        cppFlags += ' -std=c++11 -fvisibility=hidden '
        linkerFlags += ' -fvisibility=hidden '
    }
    add(Windows, x32) {
        compilerPrefix = "mingw32-"
        compilerSuffix = ".exe"
    }
    add(Windows, x64) {
        compilerSuffix = ".exe"
    }
    add(Linux, x32)
    add(Linux, x64)
    add(Linux, x32, ARM)
    add(Linux, x64, ARM)
    add(MacOsX, x64)
    add(Android)
    add(IOS) {
        cppFlags += " -stdlib=libc++ "
    }
}

//FIXME Remove this once "jnigen" task creates "libs" under the respected module (currently it writes to the root project dir).
getTasksByName('jnigen', false).first().doLast {
    if (file("${rootDir}/libs").exists()) {
        println "Applying libs dir fix..."
        ant.move file: "${rootDir}/libs",
                todir: "${projectDir}"
    }
}

//if (file('jni/build.xml').exists()) {
//    println 'Importing ANT tasks from \"jni/build.xml\"'
//    ant.importBuild('jni/build.xml') { antTargetName ->
//        def taskName = 'jnigen-build-' + antTargetName
//        println "\"$taskName\" ANT task has been imported."
//        taskName
//    }
//}
//endregion