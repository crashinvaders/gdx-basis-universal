apply plugin: 'java-library'

group 'com.crashinvaders.gdx-basis-universal'
version '0.1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava.options.incremental = true
compileJava.options.headerOutputDirectory.set(file('jni'))

sourceSets.main.java.srcDirs += ['src']
sourceSets.test.java.srcDirs += ['test']
sourceSets.test.resources.srcDirs += ['test-resources']

dependencies {
    testRuntimeOnly files('libs/gdx-basis-universal-natives.jar')
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.badlogicgames.gdx:gdx-jnigen-loader:$jnigenVersion"
}

test {
    useJUnit()
    maxHeapSize = '1G'
}

//region jnigen configuration
apply plugin: 'com.badlogicgames.gdx.gdx-jnigen'

def nativeSrcFiles = [
        'basisu_wrapper.cpp',
        'basisu_native_utils.cpp',
        'basis-universal/transcoder/basisu_transcoder.cpp',
        'com_crashinvaders_basisu_wrapper_BasisuWrapper.cpp',
        'com_crashinvaders_basisu_wrapper_BasisuFileInfo.cpp',
        'com_crashinvaders_basisu_wrapper_BasisuImageInfo.cpp',
]

// NOTE: All the disabled texture formats should be in sync with this file BasisuPlatform.java
def desktopUnsupportedFormats = ' -DBASISD_SUPPORT_PVRTC1=0 '

jnigen {
    sharedLibName = 'gdx-basis-universal'

    nativeCodeGenerator {
        sourceDir = '/src'
    }

    all {
        headerDirs = ['include', 'basis-universal/transcoder']
        cExcludes = cppExcludes = ['build/**',]

        cppIncludes = nativeSrcFiles

        cFlags +=      ' -std=c11   -fvisibility=hidden -Wall -O2 -g0 -fno-exceptions '
        cppFlags +=    ' -std=c++11 -fvisibility=hidden -Wall -O2 -g0 -fno-exceptions '
        linkerFlags += '            -fvisibility=hidden -Wall -O2 -g0 -fno-exceptions '

        // Disable texture formats we don't support at all.
        // Macros reference - https://github.com/BinomialLLC/basis_universal/wiki/Transcoder-details-and-shrinking-the-compiled-size-of-the-transcoder#shrinking-the-transcoders-compiled-size
        cppFlags += ' -DBASISD_SUPPORT_FXT1=0 '

        // Enable for Basis Universal debug messages.
        // cppFlags += ' -DBASISU_FORCE_DEVEL_MESSAGES=1 '
    }
    add(Windows, x32) {
        compilerPrefix = 'mingw32-'
        compilerSuffix = '.exe'

        linkerFlags += ' -s '   // Strip debug symbols.
        cppFlags += desktopUnsupportedFormats

    }
    add(Windows, x64) {
        compilerSuffix = '.exe'

        linkerFlags += ' -s '   // Strip debug symbols.
        cppFlags += desktopUnsupportedFormats
    }
    add(Linux, x32) {
        cppFlags += desktopUnsupportedFormats
    }
    add(Linux, x64) {
        cppFlags += desktopUnsupportedFormats
    }
    add(Linux, x32, ARM) {
        cppFlags += desktopUnsupportedFormats
    }
    add(Linux, x64, ARM) {
        cppFlags += desktopUnsupportedFormats
    }
    add(MacOsX, x64) {
        cppFlags += desktopUnsupportedFormats
    }
    add(Android) {
        linkerFlags += ' -llog '  // We use "log.h" lib and should explicitly declare it.

        cppFlags += ' -DBASISD_SUPPORT_BC7=0 '
        cppFlags += ' -DBASISD_SUPPORT_BC7_MODE5=0 '
    }
    add(IOS) {
        cppFlags += ' -stdlib=libc++ '  // iOS compiler toolchain is pretty whiny about this...

        cppFlags += ' -DBASISD_SUPPORT_DXT1=0 '
        cppFlags += ' -DBASISD_SUPPORT_DXT5A=0 '
        cppFlags += ' -DBASISD_SUPPORT_BC7=0 '
        cppFlags += ' -DBASISD_SUPPORT_BC7_MODE5=0 '
        cppFlags += ' -DBASISD_SUPPORT_ATC=0 '
        cppFlags += ' -DBASISD_SUPPORT_PVRTC2=0 '
    }
}

getTasksByName('jnigen', false).first().doLast {
    //FIXME Remove this once "jnigen" task creates "libs" under the respected module (currently it writes to the root project dir).
    if (file("${rootDir}/libs").exists()) {
        println "Applying libs dir fix..."
        ant.move file: "${rootDir}/libs",
                todir: "${projectDir}"
    }

    // Update "ndkSuffix" Android build property with platform specific file suffix.
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        ant.replaceregexp(
                match: '<property name="ndkSuffix" value="" />',
                replace: '<property name="ndkSuffix" value=".cmd" />',
                flags: 'g',
                byline: true) {
            fileset(dir: 'jni', includes: 'build-android32.xml')
        }
    }

    // Fix missing source files in Android.mk.
    ant.replaceregexp(
            match: 'LOCAL_SRC_FILES :=  ',
            replace: "LOCAL_SRC_FILES := ${String.join(' ', nativeSrcFiles)}\n",
            flags: 'g',
            byline: true) {
        fileset(dir: 'jni', includes: 'Android.mk')
    }
}

//if (file('jni/build.xml').exists()) {
//    println 'Importing ANT tasks from \"jni/build.xml\"'
//    ant.importBuild('jni/build.xml') { antTargetName ->
//        def taskName = 'jnigen-build-' + antTargetName
//        println "\"$taskName\" ANT task has been imported."
//        taskName
//    }
//}
//endregion