<!-- The build script to compile and link natives for web platform using Emscripten SDK. -->
<!-- This file is hand-written and is not generated by jnigen due to lack of Emscripten support. -->
<!-- Note that, it should not include any JNI related source files, -->
<!-- and instead should target JavaScript through Emscripten's "embind" tool.  -->
<!-- Make sure to keep it in sync with the rest of the native build configurations for other platforms. -->

<!-- IMPORTANT: Emscripten compilers (emcc and em++) should be available on the system PATH. -->
<!--			If EMSDK is the Emscripten SDK root installation,	-->
<!--			the expected path should be "${EMSDK}/upstream/emscripten".	-->
<!-- EXAMPLES:  Windows:  "C:\emsdk\upstream\emscripten" -->
<!--			Linux:  "home/username/emsdk/upstream/emscripten" -->

<project name="gdx-basis-universal-web" basedir="." default="postcompile">
	<!-- include the environment -->
	<property environment="env"/>

<!--	&lt;!&ndash; make sure EMSDK is set &ndash;&gt;-->
<!--	<condition property="env.EMSDK.exist" else="false">-->
<!--		<isset property="env.EMSDK"/>-->
<!--	</condition>-->
<!--	<fail unless="env.EMSDK.exist"-->
<!--		  message="Cannot find OS environment variable 'EMSDK'. Make sure you set one to point to Emscripten SDK location."/>-->

	<!-- output directory for temporary object files -->
	<property name="buildDir" value="target/web" />
	<!-- output directory for the shared library -->
	<property name="libsDir" value="../libs/web" />
	<!-- the name of the shared library -->
	<property name="libName" value="gdx-basis-universal"/>
	<!-- the compiler to use when compiling c files -->
	<property name="cCompiler" value="emcc"/>
	<!-- the compiler to use when compiling c++ files -->
	<property name="cppCompiler" value="em++"/>
	<!-- the compilerPrefix for the C & C++ compilers -->
	<property name="compilerPrefix" value=""/>
	<!-- the compilerSuffix for the C & C++ compilers -->
	<condition property="compilerSuffix" value=".bat" else="">
		<os family="windows" />
	</condition>
	<!-- the JS file with the library initialization code (will appended at the end of the output JS library) -->
	<property name="webLibSetupFile" value="web-lib-setup.js"/>

	<!-- common options used for the both C & C++ compilers and the linker -->
	<property name="common-opts" value="-Wall -O2 -g0 -flto -fno-exceptions -s MODULARIZE=1 -s EXPORT_NAME=createBasisuGdxModule -s ENVIRONMENT=web -s WASM=1 -s FILESYSTEM=0 --closure 1 --bind -mnontrapping-fptoint -DBASISD_SUPPORT_PVRTC2=0 -DBASISD_SUPPORT_ATC=0 -DBASISD_SUPPORT_BC7=0 -DBASISD_SUPPORT_BC7_MODE5=0 -DBASISD_SUPPORT_ASTC_HIGHER_OPAQUE_QUALITY=0 " />

	<!-- define gcc compiler, options and files to compile -->
	<property name="gcc" value="${compilerPrefix}${cCompiler}${compilerSuffix}"/>
	<property name="gcc-opts" value="-c -std=c11 ${common-opts}"/>
	<fileset id="gcc-files" dir="./">
		<!-- we don't have any C code for web target as of now -->
		<exclude name="**/*"/>
	</fileset>

	<!-- define g++ compiler, options and files to compile -->
	<property name="g++" value="${compilerPrefix}${cppCompiler}${compilerSuffix}"/>
	<property name="g++-opts" value="-c -std=c++11 ${common-opts}"/>
	<fileset id="g++-files" dir="./">
		<exclude name="target/"/>
		<exclude name="build/**"/>
		<include name="basisu_native_utils.cpp"/>
		<include name="basisu_wrapper.cpp"/>
		<include name="basis-universal/transcoder/basisu_transcoder.cpp"/>
	</fileset>

	<!-- define linker and options -->
	<property name="linker" value="${compilerPrefix}${cppCompiler}${compilerSuffix}"/>
	<property name="linker-opts" value="--extern-post-js ${webLibSetupFile} ${common-opts}"/>
	<property name="libraries" value=""/>

	<!-- cleans the build directory, removes all object files and shared libs -->
	<target name="clean">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${buildDir}"/>
			<fileset dir="${libsDir}" includes="**/*"/>
		</delete>
	</target>

	<target name="precompile">
		<condition property="has-compiler" value="true" else="false">
			<and>
				<or>
					<!-- Include both b/c Windows might be either -->
					<available file="${g++}" filepath="${env.PATH}"/>
					<available file="${g++}" filepath="${env.Path}"/>
				</or>
				<or>
					<!-- Include both b/c Windows might be either -->
					<available file="${gcc}" filepath="${env.PATH}"/>
					<available file="${gcc}" filepath="${env.Path}"/>
				</or>
			</and>
		</condition>
	</target>

	<target name="create-build-dir" depends="precompile" if="has-compiler">
		<!-- FIXME this is pretty nasty :/ -->
		<copy todir="${buildDir}">
			<fileset refid="g++-files"/>
			<fileset refid="gcc-files"/>
		</copy>
		<delete>
			<fileset dir="${buildDir}">
				<include name="*"/>
				<exclude name="*.o"/>
			</fileset>
		</delete>
		<copy todir="${buildDir}" file="${webLibSetupFile}"/>
	</target>

	<!-- compiles all C and C++ files to object files in the build directory -->
	<target name="compile" depends="create-build-dir" if="has-compiler">
		<mkdir dir="${buildDir}"/>
		<apply failonerror="true" executable="${g++}" dest="${buildDir}" verbose="true">
			<arg line="${g++-opts}"/>
			<arg value="-I."/>
			<arg value="-Ibasis-universal/transcoder"/>
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<fileset refid="g++-files"/>
			<compositemapper>
				<mapper type="glob" from="*.cpp" to="*.o"/>
				<mapper type="glob" from="*.mm" to="*.o"/>
			</compositemapper>
		</apply>
		<apply failonerror="true" executable="${gcc}" dest="${buildDir}" verbose="true">
			<arg line="${gcc-opts}"/>
			<arg value="-I."/>
			<arg value="-Ibasis-universal/transcoder"/>
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<fileset refid="gcc-files"/>
			<compositemapper>
				<mapper type="glob" from="*.c" to="*.o"/>
				<mapper type="glob" from="*.m" to="*.o"/>
			</compositemapper>
		</apply>
	</target>	

	<!-- links the shared library based on the previously compiled object files -->	
	<target name="link" depends="compile" if="has-compiler">
		<fileset dir="${buildDir}" id="objFileSet">
			<patternset>
				<include name="**/*.o" />
			</patternset>
		</fileset>
		<pathconvert pathsep=" " property="objFiles" refid="objFileSet" />
		<mkdir dir="${libsDir}" />
		<exec executable="${linker}" failonerror="true" dir="${buildDir}">
			<arg line="${linker-opts}" />
			<arg value="-o" />
			<arg path="${libsDir}/${libName}.js" />
			<arg line="${objFiles}"/>
			<arg line="${libraries}" />
		</exec>
	</target>

	<target name="postcompile" depends="link" if="has-compiler">
		<!-- generate minified gwt.xml file to include the native library files into the project distribution -->
		<echo file="${libsDir}/BasisuGdxGwtNatives.gwt.xml"
			  message="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE module PUBLIC &quot;-//Google Inc.//DTD Google Web Toolkit trunk//EN&quot; &quot;http://www.gwtproject.org/doctype/2.8.2/gwt-module.dtd&quot;&gt;&lt;module rename-to=&quot;com.crashinvaders.basisu.BasisuGdxGwtNatives&quot;&gt;&lt;public path=&quot;&quot;&gt;&lt;include name=&quot;${libName}.js&quot;/&gt;&lt;include name=&quot;${libName}.wasm&quot;/&gt;&lt;/public&gt;&lt;/module&gt;"/>
	</target>
</project>
